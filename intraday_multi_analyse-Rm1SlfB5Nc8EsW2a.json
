{"createdAt":"2025-08-10T13:47:51.778Z","updatedAt":"2025-08-11T12:20:41.000Z","id":"Rm1SlfB5Nc8EsW2a","name":"Intraday_Multi_Analyse","active":true,"isArchived":false,"nodes":[{"parameters":{"public":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.chatTrigger","typeVersion":1.1,"position":[-96,-224],"id":"144afa33-3822-430b-936e-98bc41010099","name":"When chat message received","webhookId":"be72fedc-0ed3-45b6-a9dc-d97cb9c08715"},{"parameters":{"url":"=https://api.twelvedata.com/time_series\n\n","sendQuery":true,"queryParameters":{"parameters":[{"name":"symbol","value":"={{ $json.chatInput }}"},{"name":"interval","value":"15min"},{"name":"outputsize","value":"70"},{"name":"apikey","value":"ee6a290787f341849d49e5b7110b63c1"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[416,-224],"id":"1ed6c661-f73a-4dce-803e-3aeb067c40f4","name":"vue d'ensemblex1"},{"parameters":{"url":"=https://api.twelvedata.com/time_series\n\n","sendQuery":true,"queryParameters":{"parameters":[{"name":"symbol","value":"={{ $('When chat message received').item.json.chatInput }}"},{"name":"interval","value":"1min"},{"name":"outputsize","value":"5"},{"name":"apikey","value":"ee6a290787f341849d49e5b7110b63c1"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2208,-528],"id":"70008847-f5d0-4f66-958f-3eed9652ffe2","name":"requete reguliere"},{"parameters":{"jsCode":"// $json représente la réponse de l'API Twelve Data\nconst response = $json;\n\ntry {\n  const values = response.values;\n\n  // Vérifier si on a des données\n  if (!values || values.length === 0) {\n    return [{ json: { error: \"Aucune bougie reçue de l'API.\" } }];\n  }\n\n  // --- 1. Calcul du Résumé ---\n  \n  // Les données sont du plus récent au plus ancien\n  const lastCandle = values[0];\n  const firstCandle = values[values.length - 1];\n\n  const lastClose = parseFloat(lastCandle.close);\n  const firstOpen = parseFloat(firstCandle.open);\n\n  // Calculer le plus haut, le plus bas et le volume total de la période\n  const highs = values.map(v => parseFloat(v.high));\n  const lows = values.map(v => parseFloat(v.low));\n  const volumes = values.map(v => parseInt(v.volume));\n\n  const highestHigh = Math.max(...highs);\n  const lowestLow = Math.min(...lows);\n  const totalVolume = volumes.reduce((sum, v) => sum + v, 0);\n\n  // Déterminer le momentum sur la période\n  let momentum = \"Neutre\";\n  if (lastClose > firstOpen) {\n    momentum = \"Haussier\";\n  } else if (lastClose < firstOpen) {\n    momentum = \"Baissier\";\n  }\n\n  // --- 2. Formatage des Bougies Détaillées ---\n\n  const formattedBougies = values.map(b => {\n    const time = b.datetime.split(' ')[1]; // Garder seulement l'heure\n    return {\n      heure: time,\n      open: parseFloat(b.open).toFixed(2),\n      high: parseFloat(b.high).toFixed(2),\n      low: parseFloat(b.low).toFixed(2),\n      close: parseFloat(b.close).toFixed(2),\n      volume: parseInt(b.volume)\n    };\n  });\n\n  // --- 3. Création de la Sortie Finale ---\n\n  return [{\n    json: {\n      resume_rapide: {\n        prix_actuel: lastClose.toFixed(2),\n        momentum_sur_periode: momentum,\n        plus_haut_periode: highestHigh.toFixed(2),\n        plus_bas_periode: lowestLow.toFixed(2),\n        volume_total_periode: totalVolume\n      },\n      bougies_detail: formattedBougies\n    }\n  }];\n\n} catch (e) {\n  return [{\n    json: {\n      error: \"Impossible de formater les données de l'API.\",\n      details: e.message\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2400,-528],"id":"9193f672-af32-4412-82e4-8f80631157b6","name":"Code4"},{"parameters":{"content":"## ZONE D'OBSERVATION -- 10 bougies de 1 minute (récurrence 10mn) ","height":256,"width":688,"color":4},"type":"n8n-nodes-base.stickyNote","position":[224,-64],"typeVersion":1,"id":"5b491cf4-a9ee-4dbf-a16c-5c1e49aeec0c","name":"Sticky Note5"},{"parameters":{"url":"=https://api.twelvedata.com/time_series\n\n","sendQuery":true,"queryParameters":{"parameters":[{"name":"symbol","value":"={{ $json.chatInput }}"},{"name":"interval","value":"1min"},{"name":"outputsize","value":"10"},{"name":"apikey","value":"ee6a290787f341849d49e5b7110b63c1"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[416,336],"id":"ded331f6-efaa-4ee3-b669-e5a6c8a45179","name":"requete reguliere1"},{"parameters":{"jsCode":"// $json représente la réponse de l'API Twelve Data\nconst response = $json;\n\ntry {\n  // On extrait simplement la liste des bougies\n  const bougies = response.values;\n\n  // On s'assure que les valeurs numériques sont bien des nombres\n  const formattedBougies = bougies.map(b => ({\n    datetime: b.datetime,\n    open: parseFloat(b.open),\n    high: parseFloat(b.high),\n    low: parseFloat(b.low),\n    close: parseFloat(b.close),\n    volume: parseInt(b.volume)\n  }));\n\n  // On retourne un objet propre avec la liste des bougies\n  return [{\n    json: {\n      dernieres_bougies: formattedBougies\n    }\n  }];\n\n} catch (e) {\n  return [{\n    json: {\n      error: \"Impossible de formater les données de l'API.\",\n      details: e.message\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[592,336],"id":"5b8b7193-e8cf-4bbf-b29d-432ba69d26ee","name":"Code5"},{"parameters":{"content":"## VUE D'ENSEMBLE  (2 jours - bougies 15 min)","height":256,"width":688,"color":6},"type":"n8n-nodes-base.stickyNote","position":[224,-336],"typeVersion":1,"id":"2ff8f386-f1c6-4ab0-99a4-1e8afd36365a","name":"Sticky Note7"},{"parameters":{"content":"## ZONE D'ATTAQUE - 5 bougies de 1 minute (récurrence 5mn)","height":256,"width":672,"color":3},"type":"n8n-nodes-base.stickyNote","position":[240,240],"typeVersion":1,"id":"a56a21c4-3295-448d-bdd6-bfec197c1528","name":"Sticky Note6"},{"parameters":{"content":"## ETAPE 1: Données de l'action sur 2 jours\n## ETAPE 2: Scan 4 bougies d'une minute toutes les 10 minnutes*\n## ETAPE 3: Scan 10 bougies d'une minute régulièrement (pour entrer sur le marché)\n\n## Déclenché par chat avec entrée du symbol ##","height":1184,"width":736,"color":7},"type":"n8n-nodes-base.stickyNote","position":[208,-640],"typeVersion":1,"id":"63040826-cc49-4ce5-8519-a009b0edab9c","name":"Sticky Note9"},{"parameters":{"jsCode":"// $json représente la réponse de l'API Twelve Data\nconst response = $json;\n\ntry {\n  // On extrait la liste des bougies de la réponse\n  const bougies_brutes = response.values;\n\n  // On s'assure que les valeurs numériques sont bien des nombres et on formate la date\n  const bougies_formatees = bougies_brutes.map(b => {\n    // Extraire la date et l'heure pour une meilleure lisibilité\n    const [date, time] = b.datetime.split(' ');\n    return {\n      date: date,\n      heure: time,\n      open: parseFloat(b.open),\n      high: parseFloat(b.high),\n      low: parseFloat(b.low),\n      close: parseFloat(b.close),\n      volume: parseInt(b.volume)\n    };\n  });\n\n  // On retourne un objet propre avec la liste des bougies formatées\n  return [{\n    json: {\n      vue_ensemble_15min: bougies_formatees\n    }\n  }];\n\n} catch (e) {\n  // En cas d'erreur, on renvoie un message clair\n  return [{\n    json: {\n      error: \"Impossible de formater les données 15min de l'API.\",\n      details: e.message\n    }\n  }];\n}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[608,-224],"id":"d1c77968-8423-46f1-86e5-3b0e45319e13","name":"Code6"},{"parameters":{"promptType":"define","text":"=Session de trading intraday du jour sur l'action {{ $('vue d\\'ensemblex1').item.json.meta.symbol }}","hasOutputParser":true,"options":{"systemMessage":"=Il est {{ $now}} }}\n# CONTEXTE & PERSONA\nTu es \"Executor\", un agent de trading algorithmique. Ton rôle est de suivre un processus de décision strict en deux étapes. Tu es un sniper, pas un mitrailleur : tu attends que la cible vienne dans ta zone de tir prédéfinie.\n\n\n\n✅ ÉTAPE 1 : ÉTABLIR LE PLAN DE BATAILLE (Basé sur la Vue d'Ensemble 15min SEULEMENT)\n {{ JSON.stringify($json.vue_ensemble_15min) }}\nAnalyse les données vue_ensemble_15min pour définir le scénario de trade idéal, SANS tenir compte du prix actuel.\nDétermine la Tendance de Fond : Haussière ou Baissière.\nDéfinis la Zone d'Achat Idéale : Identifie le niveau de prix d'un ancien support (Order Block ou FVG) où tu aimerais que le prix revienne pour acheter.\nDéfinis la Zone de Vente Idéale : Identifie le niveau de prix d'une ancienne résistance (Order Block ou FVG) où tu aimerais que le prix revienne pour vendre.\n✅ ÉTAPE 2 : EXÉCUTER LA CHECKLIST DE DÉCISION (Basé sur le Plan et les données 1min)\nMaintenant, prends le plan de l'Étape 1 et compare-le à la situation actuelle (temps_reel_1min). Pour déclencher un trade, tu dois répondre \"OUI\" à TOUS les tests suivants. Si un seul test échoue, ta décision est ATTENDRE.\nTEST A : Le Prix est-il dans notre Zone de Tir ?\nRécupère le PRIX_ACTUEL (dernière clôture temps_reel_1min).\nVérifie si le PRIX_ACTUEL a atteint la Zone d'Achat Idéale (si la Tendance est Haussière) OU la Zone de Vente Idéale (si la Tendance est Baissière).\nSi le prix n'est pas dans la zone idéale définie à l'Étape 1, le processus s'arrête.\nTEST B : Avons-nous une Confirmation Visuelle ?\nAnalyse les 10 dernières bougies temps_reel_1min.\nVérifie qu'il y a un signal de confirmation clair (cassure d'une structure récente dans le sens du trade).\nSi aucun signal n'est présent, le processus s'arrête.\nTEST C : Le Trade est-il Rentable ?\nCalcule les paramètres : PRIX_ENTREE (prix actuel), STOP_LOSS (point d'invalidation logique), CIBLE (prochaine zone opposée).\nCalcule le RATIO avec la formule : RATIO = (abs(CIBLE - PRIX_ENTREE) - 0.02) / (abs(PRIX_ENTREE - STOP_LOSS) + 0.02).\nVérifie si le RATIO est supérieur ou égal à 1.5.\nSi le ratio est trop faible, le processus s'arrête.\n\n## IMPORTANT\n- Tu ne dois déclencher un ACHAT ou une VENTE que si le PLAN_DE_BATAILLE (Étape 1) et la CHECKLIST (Étape 2) sont tous deux validés, dans tous les autres cas, la position sera ATTENDRE.\n- Tu dois retourner UNIQUEMENT un objet JSON avec la structure suivante. Ne fournis aucune explication, aucun texte, seulement le JSON.\n\nFORMAT JSON A RESPECTER OBLIGATOIREMENT POUR PARSING SANS AUCUN AUTRE TEXTE !!!!\n{\n  \"symbol\": \"le symbol de l'action,\"\n  \"Prix d'entrée\": \"valeur_numerique ou null\",\n  \"Position\": \"ACHAT ou VENTE ou ATTENDRE\",\n  \"stop_loss\": \"valeur_numerique ou null\",\n  \"Cible\": \"valeur_numerique ou null\",\n  \"Décision\": \"éléments déterminants pour prise de position (en 50 mots)\"\n}\n\n"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.1,"position":[1056,-32],"id":"b2af6fab-ee8d-4142-844b-04b439e536e3","name":"AI Agent","onError":"continueRegularOutput"},{"parameters":{"modelName":"models/gemini-2.5-pro","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[1040,208],"id":"f7436056-1cb3-41bf-bf92-ac043aaf1ad7","name":"Google Gemini Chat Model","credentials":{"googlePalmApi":{"id":"dvW7sOBx2nN3N5iu","name":"Google Gemini(PaLM) Api account"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('vue d\\'ensemblex1').item.json.meta.symbol }}"},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[1184,208],"id":"470c55e2-934c-45ed-b9c1-780bbec331cb","name":"Postgres Chat Memory","credentials":{"postgres":{"id":"kplKRIiTUIKSbjxH","name":"Agent_Analyste_Bourse"}}},{"parameters":{"jsonSchemaExample":"{\n  \"symbol\": \"le symbol de l'action\",\n  \"Prix d'entrée\": \"valeur_numerique ou null\",\n  \"Position\": \"ACHAT ou VENTE ou ATTENDRE\",\n  \"stop_loss\": \"valeur_numerique ou null\",\n  \"Cible\": \"valeur_numerique ou null\",\n  \"Décision\": \"éléments déterminants pour prise de position (en 50 mots)\"\n}\n"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.3,"position":[1376,208],"id":"f8e1b22b-1990-44ce-b1be-d791e2b50c40","name":"Structured Output Parser"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.output.Position }}","rightValue":"ATTENDRE","operator":{"type":"string","operation":"equals"},"id":"e9de63fa-3507-4e90-9e0e-ac5c131c5bd3"}],"combinator":"and"},"renameOutput":true,"outputKey":"ATTENDRE"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"20bb7a38-75ec-4f42-a257-0e5233e3dd7b","leftValue":"={{ $json.output.Position }}","rightValue":"ACHAT","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"ACHAT"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"13c3d632-0f7b-4070-b70a-99d79d387914","leftValue":"={{ $json.output.Position }}","rightValue":"VENTE","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"VENTE"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[1536,-48],"id":"374e550b-43fe-44f4-aa0f-cb5d989b351b","name":"Switch"},{"parameters":{"amount":4,"unit":"minutes"},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[1984,-528],"id":"074310a8-553d-4109-be73-892e1273277c","name":"Wait","webhookId":"50b5318a-d9e2-4cf6-84c3-b42ed7b38349"},{"parameters":{"chatId":"7562186427","text":"={{ $json.texte }}","additionalFields":{"appendAttribution":false}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[2208,-48],"id":"7d11b082-7194-47ec-b61f-04df715a82cd","name":"Send a text message","webhookId":"32f62527-6b07-4667-9d8f-b257a8d85e07","alwaysOutputData":true,"credentials":{"telegramApi":{"id":"3zWMDdIXgK9GGJJG","name":"Telegram account 2"}},"onError":"continueRegularOutput"},{"parameters":{"jsCode":"// On récupère l'objet \"output\"\nconst data = items[0].json.output;\n\n// On construit un texte lisible en ignorant les valeurs \"null\"\nlet texte = '';\nfor (const [cle, valeur] of Object.entries(data)) {\n  if (valeur !== \"null\") {\n    texte += `${cle} : ${valeur}\\n`;\n  }\n}\n\n// On renvoie le texte\nreturn [{ json: { texte } }];\n\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1984,-48],"id":"a48c70de-9b8e-41c5-990a-682e0166376d","name":"Code","alwaysOutputData":true},{"parameters":{"jsCode":"// On récupère l'objet \"output\"\nconst data = items[0].json.output;\n\n// On construit un texte lisible en ignorant les valeurs \"null\"\nlet texte = '';\nfor (const [cle, valeur] of Object.entries(data)) {\n  if (valeur !== \"null\") {\n    texte += `${cle} : ${valeur}\\n`;\n  }\n}\n\n// On renvoie le texte\nreturn [{ json: { texte } }];\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1984,192],"id":"49c879f9-f21b-48b5-b5ee-df5bf7ad58c4","name":"Code1"},{"parameters":{"chatId":"7562186427","text":"={{ $json.texte }}","additionalFields":{"appendAttribution":false}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[2208,192],"id":"c4e69957-4e7c-474a-806a-c94278bc1a3c","name":"Send a text message1","webhookId":"32f62527-6b07-4667-9d8f-b257a8d85e07","credentials":{"telegramApi":{"id":"3zWMDdIXgK9GGJJG","name":"Telegram account 2"}}},{"parameters":{"jsCode":"// On récupère l'objet \"output\"\nconst data = items[0].json.output;\n\n// On construit un texte lisible en ignorant les valeurs \"null\"\nlet texte = '';\nfor (const [cle, valeur] of Object.entries(data)) {\n  if (valeur !== \"null\") {\n    texte += `${cle} : ${valeur}\\n`;\n  }\n}\n\n// On renvoie le texte\nreturn [{ json: { texte } }];\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1984,-256],"id":"1becd7f7-1f98-4e5e-ade7-33e76e56dd6c","name":"Code2","alwaysOutputData":true,"disabled":true},{"parameters":{"chatId":"7562186427","text":"={{ $json.texte }}","additionalFields":{"appendAttribution":false}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[2208,-256],"id":"20509ee7-27bf-4a72-b463-ef09664650b4","name":"Send a text message2","webhookId":"32f62527-6b07-4667-9d8f-b257a8d85e07","alwaysOutputData":true,"credentials":{"telegramApi":{"id":"3zWMDdIXgK9GGJJG","name":"Telegram account 2"}},"disabled":true,"onError":"continueRegularOutput"}],"connections":{"When chat message received":{"main":[[{"node":"vue d'ensemblex1","type":"main","index":0}]]},"vue d'ensemblex1":{"main":[[{"node":"Code6","type":"main","index":0}]]},"requete reguliere":{"main":[[{"node":"Code4","type":"main","index":0}]]},"requete reguliere1":{"main":[[{"node":"Code5","type":"main","index":0}]]},"Code6":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Google Gemini Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Postgres Chat Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"AI Agent","type":"ai_outputParser","index":0}]]},"Code4":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"AI Agent":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Code2","type":"main","index":0}],[{"node":"Code","type":"main","index":0}],[{"node":"Code1","type":"main","index":0}]]},"Wait":{"main":[[{"node":"requete reguliere","type":"main","index":0}]]},"Code":{"main":[[{"node":"Send a text message","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Send a text message1","type":"main","index":0}]]},"Send a text message":{"main":[[{"node":"Wait","type":"main","index":0}]]},"Code2":{"main":[[{"node":"Send a text message2","type":"main","index":0}]]},"Send a text message2":{"main":[[{"node":"Wait","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"a7d48807-3bcc-482f-8e31-a478748ab474","triggerCount":1,"tags":[]}